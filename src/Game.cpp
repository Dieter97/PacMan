//
// Created by dieter on 26/02/18.
//

#include <zconf.h>
#include "../include/Game.h"
#include "../include/Types.h"
#include "../include/Map.h"
#include "../SDLMap.h"

void Game::start(Factory* f) {
    int map[31][14] = {
            {WALL_DOWN_RIGHT,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_TOP_RIGHT},
            {WALL_HORIZONTAL,POINT_SMALL,POINT_BIG,POINT_SMALL,POINT_SMALL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,POINT_SMALL,FULL_DOWN_RIGHT,FULL_RIGHT,FULL_TOP_RIGHT,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,POINT_SMALL,FULL_DOWN,FULL_CENTERED,FULL_TOP,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,POINT_SMALL,FULL_DOWN_LEFT,FULL_LEFT,FULL_TOP_LEFT,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_HORIZONTAL,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,BLANK,WALL_HORIZONTAL},
            {WALL_LEFT_DOWN,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_VERTICAL,WALL_LEFT_TOP}


    };
    int *b[31];
    for(int i = 0;i<31;i++){
        b[i] = map[i];
    }

    //TODO read map from file

    //Init game
    bool quit = false;
    f->initDisplay();
    f->loadMedia();
    Map* tiles = f->createMap(31,14);
    tiles->loadMap(b, PINK_TILE);
    Tile* tile1 = f->createTile(40,60,POINT_BIG,PINK_TILE);
    Event* events = f->createEventSystem();
    PacMan* player = f->createPacMan(50,26,3);
    Ghost* enemy1 = f->createGhost(25,20,2,RED_GHOST);
    Ghost* enemy2 = f->createGhost(180,250,2,BLUE_GHOST);
    Ghost* enemy3 = f->createGhost(170,140,1,PINK_GHOST);

    //Game loop
    while(!quit){
        f->clear();
        switch (events->getEvent()){
            case KEY_PRESS_QUIT:
                quit = true;
                break;
            case KEY_PRESS_SURFACE_RIGHT:
                player->move(DIR_RIGHT);
                break;
            case KEY_PRESS_SURFACE_LEFT:
                player->move(DIR_LEFT);
                break;
            case KEY_PRESS_SURFACE_UP:
                player->move(DIR_UP);
                break;
            case KEY_PRESS_SURFACE_DOWN:
                player->move(DIR_DOWN);
                break;
            default:
                break;
        }
        tiles->visualize();
        enemy1-> move(DIR_UP);
        enemy1->visualize();
        enemy2-> move(DIR_LEFT);
        enemy2->visualize();
        enemy3-> move(DIR_RIGHT);
        enemy3->visualize();
        player->visualize();
        f->render();
    }

    //Close game
    f->close();
}

